{-# OPTIONS --without-K --safe #-}

open import Agda.Builtin.Maybe
  using (Maybe ; just ; nothing)

open import Util

data Surface : Type where
  top bottom : Surface

data Condiment : Type where
  peanutButter jelly : Condiment

data BreadFlavour : Type where
  sourdough wholeGrain white : BreadFlavour

record SliceOfBread' : Type where
  constructor sliceOfBread
  field
    flavour : BreadFlavour
    -- smearedTop : Condiment ‚àî ùüô
    smearedTop : Maybe Condiment
    -- smearedBottom : Condiment ‚àî ùüô
    smearedBottom : Maybe Condiment

open SliceOfBread' public

checkShell : SliceOfBread' ‚Üí SliceOfBread' ‚Üí Type
checkShell
  (sliceOfBread tsFlavour tsSmearedTop tsSmearedBottom)
  (sliceOfBread bsFlavour bsSmearedTop bsSmearedBottom)
  = (tsSmearedTop ‚â° nothing)
    √ó (bsSmearedBottom ‚â° nothing)
    √ó ((tsSmearedBottom ‚â¢ nothing) ‚àî (bsSmearedTop ‚â¢ nothing))

record Sandwich' : Type where
  constructor sandwich
  field
    topSlice : SliceOfBread'
    bottomSlice : SliceOfBread'
    shellOk : checkShell topSlice bottomSlice
    pieces : Œ£ n Íûâ ‚Ñï , n ‚â• 1

SliceOfBread : Type
SliceOfBread =
  BreadFlavour
  √ó Maybe Condiment
  √ó Maybe Condiment

Sandwich : Type
Sandwich = Œ£
  ((tsFlavour , tsSmearedTop , tsSmearedBottom)
    , (bsFlavour , bsSmearedTop , bsSmearedBottom)) Íûâ SliceOfBread √ó SliceOfBread
  , ((tsSmearedTop ‚â° nothing)
    √ó (bsSmearedBottom ‚â° nothing)
    √ó ((tsSmearedBottom ‚â¢ nothing) ‚àî (bsSmearedTop ‚â¢ nothing)))
  √ó (Œ£ n Íûâ ‚Ñï , n ‚â• 1)

sw1 : Sandwich
sw1 = ((topSlice , bottomSlice) , shellOk , pieces)
  where
    topSlice = sourdough , nothing , just peanutButter
    bottomSlice = sourdough , just jelly , nothing
    shellOk = refl nothing , refl nothing , inl Œª ()
    pieces = 2 , ‚ãÜ
